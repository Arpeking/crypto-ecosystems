name: Refresh Upstream and Notify API

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day
  push:
    branches:
      - master

permissions:
  contents: write
  actions: write

jobs:
  monitor_changes:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your forked repository
      - name: Checkout Fork
        uses: actions/checkout@v3
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Set Git identity
      - name: Set Git Identity
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions"
          echo "Git identity set"

      # Step 2: Add the upstream repository and fetch changes
      - name: Set Upstream Repository
        run: |
          echo "Adding upstream repository..."
          git remote add upstream https://github.com/electric-capital/crypto-ecosystems.git
          echo "Fetching from upstream..."
          git fetch upstream master
          echo "Current remotes:"
          git remote -v
          echo "Current branch:"
          git branch -v

      # Step 3: Find Changed TOML Files
      - name: Find Changed TOML Files
        id: changed_files
        run: |
          echo "Checking for changed files..."
          # Compare your fork with the upstream repository
          CHANGED_FILES=$(git diff --name-only HEAD upstream/master | grep '\.toml$' || true)
          FILES_JSON="[]"
          echo "Changed TOML Files:"
          echo "$CHANGED_FILES"

          # Save the file list as a JSON array
          if [[ -n "$CHANGED_FILES" ]]; then
             FILES_JSON=$(echo "$CHANGED_FILES" | sed 's/^ *//; s/ *$//' | jq -R -s 'split("\n") | map(select(length > 0)) | @json' | tr -d '\n')
          fi

          echo "Files JSON: $FILES_JSON"
          echo "files=$FILES_JSON" >> $GITHUB_OUTPUT

      # Step 4: Call API with List of Changed Files
      - name: Notify API
        id: api_call
        env:
          API_URL: ${{ secrets.TALENT_PROTOCOL_API_URL }}
          API_KEY: ${{ secrets.TALENT_PROTOCOL_API_SECRET }}
        run: |
          echo "Preparing API call..."
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Files to send: ${{ steps.changed_files.outputs.files }}"
          
          # Make the API call with verbose output
          curl -v -X PUT $API_URL \
          -H "Content-Type: application/json" \
          -H "X-API-SECRET: $API_KEY" \
          -d '{
            "repository": "${{ github.repository }}",
            "pushed_by": "${{ github.actor }}",
            "changed_files": '${{ steps.changed_files.outputs.files }}'
          }' \
          -o response.json \
          -w "\nHTTP Response Code: %{http_code}\n" > status_code

          HTTP_CODE=$(cat status_code)
          echo "API Response:"
          cat response.json
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo "API call successful"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "API call failed with status $HTTP_CODE"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Sync Fork with Upstream
        if: steps.api_call.outputs.success == 'true' # Only run if the API call was successful
        run: |
          echo "Starting sync with upstream..."
          # Merge upstream/master into the current branch
          git checkout master
          echo "Current branch after checkout:"
          git branch -v
          git reset --hard upstream/master
          echo "Pushing changes to origin..."
          # Push the updated branch back to the fork
          git push origin master --force
          echo "Sync completed"